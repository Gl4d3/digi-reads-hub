
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zwhhliwmyecyrtcpkkxv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3aGhsaXdteWVjeXJ0Y3Bra3h2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MTg3OTIsImV4cCI6MjA1ODI5NDc5Mn0.hYs4SCryIePzbeGR6ezHCT1Qi7x69prBNgGqihWP47U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Since we're working with tables that don't exist in the actual schema,
// we need to use a different approach for type safety
type GenericTable = Record<string, any>;

// Create a type-safe wrapper for querying non-existent tables
export const fromSupabase = {
  // Use type assertion for tables that don't exist in the schema
  books: () => supabase.from('books' as any) as any,
  categories: () => supabase.from('categories' as any) as any,
  book_categories: () => supabase.from('book_categories' as any) as any,
  bundles: () => supabase.from('bundles' as any) as any,
  bundle_books: () => supabase.from('bundle_books' as any) as any,
  favorites: () => supabase.from('favorites'),
  mailing_list: () => supabase.from('mailing_list' as any) as any
};
